using System;
using System.Collections.Generic;
using System.Windows.Forms;
using Acquire.Models;
using Acquire.Panels;

namespace Acquire.Frames
{
    public partial class AcquireSetupFrame : Form
    {
        #region Public Variables

        /// <summary>
        /// The list of players generated by this setup frame
        /// </summary>
        public List<Player> Players { get; } = new List<Player>();

        #endregion

        #region Private Member Variables

        // Whether or not we are starting the game
        private bool isStarting;

        // The list of current player names (to eliminate duplicates)
        private readonly List<string> playerNames = new List<string>();

        #endregion

        /// <summary>
        /// Make a new frame and initialize all the components
        /// </summary>
        public AcquireSetupFrame()
        {
            InitializeComponent();
        }

        #region Event Handlers

        /// <summary>
        /// Gathers all the players from the PlayerSetupPanels, checks that they are valid, and starts the game
        /// </summary>
        /// 
        /// <param name="sender">The object sending the event</param>
        /// <param name="args">The arguments sent</param>
        private void StartButton_Click(object sender, EventArgs args)
        {
            // How many AI players we have
            int aiPlayers = 0;
            // Create a list of the PSPs to make it easier and quicker to run the same code on each
            List<PlayerSetupPanel> setupPanels = new List<PlayerSetupPanel>
            {
                PlayerSetupPanel1,
                PlayerSetupPanel2,
                PlayerSetupPanel3,
                PlayerSetupPanel5,
                PlayerSetupPanel5,
                PlayerSetupPanel6,
                PlayerSetupPanel7,
                PlayerSetupPanel8
            };
            // Clear the current list of players
            Players.Clear();
            // Clear the current list of player names
            playerNames.Clear();

            // For each panel...
            foreach (PlayerSetupPanel panel in setupPanels)
            {
                // If we are not joining, continue
                if (!panel.IsJoining())
                {
                    continue;
                }

                // Check if the player is ready
                if (!panel.IsReady())
                {
                    // Tell the user who isn't ready
                    if (panel.GetPlayerType() != Player.AI_PLAYER)
                    {
                        MessageBox.Show($@"{panel.GetName()} is not ready yet.", @"Player not ready", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    else
                    {
                        MessageBox.Show(@"AI Player is not set to ready yet.", @"AI not set to ready", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    return;
                }

                // Get the current name
                string name = panel.GetName();

                // Make sure there are no duplicates
                if (playerNames.Contains(name))
                {
                    // Find a number to add to the end to make it unique
                    for (int i = 2; i <= 9; i++)
                    {
                        if (!playerNames.Contains($"{name} ({i})"))
                        {
                            name += $" ({i})";
                            break;
                        }
                    }
                }

                // Add this name to the list of names used
                playerNames.Add(name);

                // Create the player of the correct type
                if (panel.GetPlayerType() == Player.LOCAL_PLAYER)
                {
                    Players.Add(new Player(name, Player.LOCAL_PLAYER));
                }
                else if (panel.GetPlayerType() == Player.REMOTE_PLAYER)
                {
                    Players.Add(new RemotePlayer(name, panel.GetAddress()));
                }
                else
                {
                    aiPlayers++;
                    Players.Add(new AiPlayer(name));
                }
            }

            // Only continue if we have at least one player
            if (Players.Count > 1)
            {
                // Make sure the user knows that there are only AI players
                if (aiPlayers == Players.Count)
                {
                    if (MessageBox.Show(@"There are no human players, is this ok?", @"No human players?", MessageBoxButtons.YesNo, MessageBoxIcon.Error) != DialogResult.Yes)
                    {
                        return;
                    }
                }

                isStarting = true;
                Close();
            }
            else
            {
                MessageBox.Show(@"There are not enough players to start the game.", @"Not enough players", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// Handles the form closing
        /// </summary>
        /// 
        /// <param name="sender">The object sending the event</param>
        /// <param name="args">The arguments sent</param>
        private void AcquireSetupFrame_FormClosing(object sender, FormClosingEventArgs args)
        {
            // If windows is shutting down, close it.
            if (args.CloseReason == CloseReason.WindowsShutDown)
                return;

            // If we are trying to start
            if (isStarting)
            {
                // Make sure the user really wants it
                if (MessageBox.Show(@"Are you sure you want to start?", @"Are you sure?", MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
                {
                    args.Cancel = true;
                    isStarting = false;
                }
            }
            // Otherwise only close it if the user wants to.
            else if (MessageBox.Show(@"Are you sure you want to quit?", @"Are you sure?", MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
            {
                args.Cancel = true;
            }
        }

        #endregion
    }
}

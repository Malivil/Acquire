using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Net;
using System.Windows.Forms;
using Acquire.Enums;
using Acquire.Forms;
using Acquire.Models;
using Acquire.Models.Interfaces;
using Acquire.NetworkModels;
using Acquire.Panels;
using Newtonsoft.Json;
using SocketMessaging;
using SocketMessaging.Server;

namespace Acquire.Frames
{
    public partial class AcquireSetupFrame : Form
    {
        #region Public Variables

        /// <summary>
        /// The list of players generated by this setup frame
        /// </summary>
        public List<IPlayer> Players { get; } = new List<IPlayer>();

        /// <summary>
        /// Whether or not we are starting the game
        /// </summary>
        public bool IsStarting { get; private set; }

        #endregion

        #region Private Member Variables

        // Whether this game already has a host
        private bool HasHost => hostPlayer?.IsHost() ?? false;

        // Whether the host player is a local player or not
        private bool IsHostLocal => hostPlayer?.GetPlayerType() == PlayerType.Local;

        // Who the host player is
        private PlayerSetupPanel hostPlayer;

        // The original size of this frame
        private readonly Size originalSize;

        // The size of the remote connection status window
        private const int remoteStatusWidth = 285;

        // The server we are hosting for this game
        private TcpServer hostServer;

        #endregion

        /// <summary>
        /// Make a new frame and initialize all the components
        /// </summary>
        public AcquireSetupFrame()
        {
            InitializeComponent();
            originalSize = Size;
        }

        #region Event Handlers

        /// <summary>
        /// Gathers all the players from the PlayerSetupPanels, checks that they are valid, and starts the game
        /// </summary>
        /// 
        /// <param name="sender">The object sending the event</param>
        /// <param name="args">The arguments sent</param>
        private void StartButton_Click(object sender, EventArgs args)
        {
            // Create a list of the PSPs to make it easier and quicker to run the same code on each
            IEnumerable<PlayerSetupPanel> setupPanels = Controls.OfType<PlayerSetupPanel>();
            // Clear the current list of players
            Players.Clear();
            // The list of current player names (to eliminate duplicates)
            List<string> playerNames = new List<string>();

            // For each panel...
            foreach (PlayerSetupPanel panel in setupPanels)
            {
                // If we are not joining, continue
                if (!panel.IsJoining())
                {
                    continue;
                }

                // Check if the player is ready
                if (!panel.IsReady())
                {
                    // Tell the user who isn't ready
                    if (panel.GetPlayerType() != PlayerType.AI)
                    {
                        MessageBox.Show($@"{panel.GetName()} is not ready yet.", @"Player not ready", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    else
                    {
                        MessageBox.Show(@"AI Player is not set to ready yet.", @"AI not set to ready", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }

                    return;
                }

                // TODO: Figure out how to handle this for remote players. Maybe have it as part of the handshake and force a remote player to append a number then?

                // Get the current name
                string name = panel.GetName();

                // Make sure there are no duplicates
                if (playerNames.Contains(name))
                {
                    // Find a number to add to the end to make it unique
                    for (int i = 2; i <= 9; i++)
                    {
                        if (!playerNames.Contains($"{name} ({i})"))
                        {
                            name += $" ({i})";
                            break;
                        }
                    }
                }

                // Add this name to the list of names used
                playerNames.Add(name);

                // Create the player of the correct type
                Players.Add(panel.GetPlayer(name));
            }

            // Only continue if we have at least one player
            if (Players.Count > 1)
            {
                // Make sure the user knows that there are only AI players
                if (Players.Count(p => p.Type == PlayerType.AI) == Players.Count)
                {
                    if (MessageBox.Show(@"There are no human players, is this ok?", @"No human players?", MessageBoxButtons.YesNo, MessageBoxIcon.Error) != DialogResult.Yes)
                    {
                        return;
                    }
                }

                // Make sure we have a host if we have remote players
                if (Players.Any(p => p.Type == PlayerType.Remote) && !HasHost)
                {
                    MessageBox.Show(@"There are remote players listed but no host selected. Please select a host", @"No host selected", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                // If there is a remote host, initiate the connection
                if (Players.SingleOrDefault(p => p.Type == PlayerType.Remote && p.IsHost) is IRemotePlayer remoteHost)
                {
                    DialogResult result = new RemoteConnectForm(remoteHost.Address).ShowDialog();
                    // Don't start the game if the prcoess didn't complete successfully
                    if (result != DialogResult.OK)
                    {
                        return;
                    }
                }

                IsStarting = true;
                Close();
            }
            else
            {
                MessageBox.Show(@"There are not enough players to start the game.", @"Not enough players", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// Handles the form closing
        /// </summary>
        /// 
        /// <param name="sender">The object sending the event</param>
        /// <param name="args">The arguments sent</param>
        private void AcquireSetupFrame_FormClosing(object sender, FormClosingEventArgs args)
        {
            // If windows is shutting down, close it.
            if (args.CloseReason == CloseReason.WindowsShutDown)
            {
                return;
            }

            // If we are trying to start
            if (IsStarting)
            {
                // Make sure the user really wants it
                if (MessageBox.Show(@"Are you sure you want to start?", @"Are you sure?", MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
                {
                    args.Cancel = true;
                    IsStarting = false;
                }
            }
            // Otherwise only close it if the user wants to.
            else if (MessageBox.Show(@"Are you sure you want to quit?", @"Are you sure?", MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
            {
                args.Cancel = true;
            }
        }

        /// <summary>
        /// Handles event where a player is either claiming or releasing hosting rights for this game
        /// </summary>
        ///
        /// <param name="sender">The panel sending the event</param>
        /// <param name="isHost">Whether the sending panel is trying to claim host of this game</param>
        ///
        /// <returns>True if the panel successfully claimed or released hosting rights, false otherwise</returns>
        private bool PlayerSetupPanel_PlayerHostStatusChanged(PlayerSetupPanel sender, bool isHost)
        {
            if (HasHost && isHost)
            {
                return false;
            }

            if (isHost)
            {
                hostPlayer = sender;
            }
            else if (hostPlayer.PlayerId == sender.PlayerId)
            {
                hostPlayer = null;
            }

            // If this isn't a local host and we have an open server, close it
            if (!IsHostLocal && CloseServerButton.Enabled)
            {
                CloseServerButton.PerformClick();
                OpenServerButton.Visible = false;
                OpenServerButton.Enabled = false;
            }
            else
            {
                OpenServerButton.Visible = true;
                OpenServerButton.Enabled = true;
            }

            return true;
        }

        private void OpenServerButton_Click(object sender, EventArgs e)
        {
            MaximumSize = new Size(Size.Width + remoteStatusWidth, Size.Height);
            Size = MaximumSize;
            MinimumSize = MaximumSize;
            OpenServerButton.Enabled = false;

            // Begin listening
            IPEndPoint endpoint = hostPlayer.GetAddressEndPoint();

            try
            {
                hostServer = new TcpServer();
                hostServer.Connected += Server_Connected;
                hostServer.Start(endpoint.Port);
                AddRemoteStatusMessage($"Listening for new connections on {endpoint.Address}:{endpoint.Port}");
            }
            catch (Exception ex)
            {
                AddRemoteStatusMessage($"Error when trying to open server connection: {ex.Message}");
            }
        }

        private void Server_Connected(object sender, ConnectionEventArgs e)
        {
            // Update the UI
            if (e.Connection.Socket.RemoteEndPoint is IPEndPoint endpoint)
            {
                AddRemoteStatusMessage($"Received new connection from {endpoint.Address}:{endpoint.Port}");
            }
            else
            {
                AddRemoteStatusMessage("Received new connection");
            }

            NetworkMessage connectMessage = new NetworkMessage(new AcquireNetworkModel(), hostPlayer.GetAddressEndPoint(), MessageType.Connect);
            // Set up events for receiving messages and disconnects from client
            e.Connection.ReceivedMessage += Connection_ReceivedMessage;
            e.Connection.Disconnected += Connection_Disconnected;
            // TODO: Remove these when moving on to the actual game

            // Set up the connection to use our expected format
            e.Connection.SetDelimiter('|');
            e.Connection.SetMode(MessageMode.PrefixedLength);

            // Send the connection response message
            string message = JsonConvert.SerializeObject(connectMessage);
            Utilities.SendMessageToConnection(e.Connection, message);
        }

        private void Connection_ReceivedMessage(object sender, EventArgs e)
        {
            Connection connection = sender as Connection;
            NetworkMessage message = Utilities.GetMessageFromConnection<NetworkMessage>(connection);
            switch (message.MessageType)
            {
                case MessageType.PlayerListResponse:
                    // TODO: Ask for players list to trigger this
                    // TODO: Do something with the players list
                    // TODO: Negotiate player names
                    // TODO: Negotiate player limits
                    break;
                default:
                    RemoteStatusBox.Items.Add($"ERROR: Received unknown message type! `{message.MessageType}`");
                    break;
            }
        }

        // TODO: Use this to send the players list from the connecting remote and also when the Start sequence begins
        //case MessageType.PlayerListRequest:
        //PlayerList players = new PlayerList
        //{
        //    Players = GetAdjustedPlayersList()
        //};
        //Utilities.SendMessageToConnection(connection, Utilities.GetNetworkMessageString(players, hostPlayer.GetAddressEndPoint(), MessageType.PlayerListResponse));
        //break;

        private void Connection_Disconnected(object sender, EventArgs e)
        {
            Connection connection = (Connection)sender;
            if (connection.Socket.RemoteEndPoint is IPEndPoint endpoint)
            {
                AddRemoteStatusMessage($"Lost connection from {endpoint.Address}:{endpoint.Port}");
            }
            else
            {
                AddRemoteStatusMessage("Lost connection");
            }
        }

        private void CloseServerButton_Click(object sender, EventArgs e)
        {
            MinimumSize = originalSize;
            Size = originalSize;
            MaximumSize = originalSize;
            OpenServerButton.Visible = true;
            OpenServerButton.Enabled = true;

            // Stop listening
            if (hostServer != null)
            {
                hostServer.Connected -= Server_Connected;
                RemoteStatusBox.Items.Add("Stopped listening for new connections");
            }
        }

        #endregion

        #region Helpers

        private void AddRemoteStatusMessage(string message)
        {
            Utilities.InvokeOnControl(RemoteStatusBox, () => RemoteStatusBox.Items.Add(message));
        }

        private List<Player> GetAdjustedPlayersList()
        {
            List<Player> players = new List<Player>();
            foreach (IPlayer player in Players)
            {
                // Change local players to remote players so each connecting game knows how to handle things correctly
                if (player.Type == PlayerType.Local)
                {
                    players.Add(new RemotePlayer(player.PlayerId, hostPlayer.GetAddressEndPoint(), player.IsHost, player.Name));
                }

                // TODO: Exclude the players from the asking client if they are in this list already?

                players.Add((Player)player);
            }
            return players;
        }

    #endregion
    }
}

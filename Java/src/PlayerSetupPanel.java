/* **DON'T CHANGE THIS HEADER**
 $Author: Mike Lebson $
 $Revision: 1.18 $
 $Date: 2007/04/24 16:47:34 $
 $Source: /cvs/repo/Acquire/src/PlayerSetupPanel.java,v $
*/

public class PlayerSetupPanel extends javax.swing.JPanel
{
    //*PRIVATE FIELDS*//

    private int ready = -1, toggled = -1, myPlayerNum;
    private Player myPlayer = null;
    private boolean isActive;
    private String myName = "Player Name";
    private String myIP = "IP Address";

    //*CONSTRUCTORS*//

    public PlayerSetupPanel(int n)
    {
        myPlayerNum = n;
        initComponents();
    }

    //*OTHER METHODS*//

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        PlayerType = new javax.swing.JComboBox();
        PlayerNameField = new javax.swing.JTextField();
        ReadyToggle = new javax.swing.JToggleButton();
        IPField = new javax.swing.JFormattedTextField();
        PanelToggle = new javax.swing.JToggleButton();
        ReadyField = new javax.swing.JTextField();

        PlayerType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Type of Player", "Local Player", "Remote Player", "AI Player" }));
        PlayerType.setActionCommand("ChangePlayerType");
        PlayerType.setEnabled(false);
        PlayerType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayerTypeActionPerformed(evt);
            }
        });

        PlayerNameField.setText("Player Name");
        PlayerNameField.setEnabled(false);

        ReadyToggle.setText("Ready");
        ReadyToggle.setEnabled(false);
        ReadyToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReadyToggleActionPerformed(evt);
            }
        });

        IPField.setColumns(5);
        IPField.setText("IP Address");
        IPField.setEnabled(false);

        PanelToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PanelToggleActionPerformed(evt);
            }
        });

        ReadyField.setEditable(false);
        ReadyField.setText("Not Ready");
        ReadyField.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PanelToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PlayerType, 0, 291, Short.MAX_VALUE)
                    .addComponent(PlayerNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IPField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ReadyToggle, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ReadyField, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PanelToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PlayerType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PlayerNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ReadyToggle)
                            .addComponent(ReadyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(IPField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void resetVisible()
    {
        IPField.setEnabled(false);
        PlayerNameField.setEnabled(false);
        ReadyField.setEnabled(false);
        ReadyToggle.setEnabled(false);
        
        if(toggled > 0)
        {
            PlayerType.setEnabled(true);
            isActive(true);

            if(PlayerType.getSelectedItem().equals("Local Player"))
            {
                PlayerNameField.setEnabled(true);
                ReadyField.setEnabled(true);
                ReadyToggle.setEnabled(true);
                if(ready > 0)
                {
                    ReadyToggle.doClick();
                }
            }
            else if(PlayerType.getSelectedItem().equals("Remote Player"))
            {
                PlayerNameField.setEnabled(false);
                ReadyField.setEnabled(true);
                IPField.setEnabled(true);
                //Until networking is finished
                ReadyToggle.setEnabled(true);
                //
                if(ready > 0)
                {
                    ReadyToggle.doClick();
                }
            }
            else if(PlayerType.getSelectedItem().equals("AI Player"))
            {
                PlayerNameField.setEnabled(false);
                IPField.setEnabled(false);

                ReadyToggle();
            }
            else
            {
                if(ready == 1)
                {
                    ReadyToggle();
                }
            }
        }
        else
        {
            isActive(false);
            if(PlayerType.getSelectedItem().equals("AI Player"))
            {
                ReadyToggle();
            }
            PlayerType.setEnabled(false);
        }
    }
    
    private String readyString()
    {
        if(ready > 0)
        {
            return "Ready!";
        }
        else
        {
            return "Not Ready";
        }
    }

    private void ReadyToggle()
    {
        ReadyField.setEnabled(true);
        ReadyToggle.setEnabled(true);
        ReadyToggle.doClick();
        ReadyToggle.setEnabled(false);
        ReadyField.setEnabled(false);
    }

    private void ReadyToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReadyToggleActionPerformed
        AcquireSetupFrame.getGO().requestFocusInWindow();

        ready *= -1;
        ReadyField.setText(readyString());

        if(!PlayerType.getSelectedItem().equals("Type of Player"))
        {
            if(PlayerType.getSelectedItem().equals("Local Player"))
            {
                if(PlayerNameField.isEnabled() && ready == 1)
                {
                    PlayerNameField.setEnabled(false);
                }
                else if(ready == -1)
                {
                    PlayerNameField.setEnabled(true);
                }
            }
            else if(PlayerType.getSelectedItem().equals("Remote Player"))
            {
                if(IPField.isEnabled() && ready == 1)
                {
                    IPField.setEnabled(false);
                }
                else if(ready == -1)
                {
                    IPField.setEnabled(true);
                }
            }
        }

        myName = PlayerNameField.getText();
        myIP = IPField.getText();
    }//GEN-LAST:event_ReadyToggleActionPerformed

    private void PanelToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PanelToggleActionPerformed
        toggled *= -1;
        if(isReady() && toggled == -1)
        {
            ReadyToggle.doClick();
        }
        resetVisible();
    }//GEN-LAST:event_PanelToggleActionPerformed

    private void PlayerTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayerTypeActionPerformed
        resetVisible();
    }//GEN-LAST:event_PlayerTypeActionPerformed

    //*SET METHODS*//

    public void setPlayer(Player p)
    {
        myPlayer = p;
    }

    public void setPlayerName(String s)
    {
        myName = s;
    }

    public void setIP(String i)
    {
        myIP = i;
    }

    //*GET METHODS*//

    public Player getPlayer()
    {
        if(PlayerType.getSelectedItem().equals("Local Player"))
        {
            myPlayer = new LocalPlayer(myName);
        }
        else if(PlayerType.getSelectedItem().equals("Remote Player"))
        {
            myPlayer =  new RemotePlayer(myName, IPField.getText());
        }
        else if(PlayerType.getSelectedItem().equals("AI Player"))
        {
            if(myName != "Player Name")
            {
                myPlayer = new AIPlayer(myName);
            }
            else
            {
                myPlayer = new AIPlayer();
            }
        }
        else
        {
            myPlayer = null;
        }

        return myPlayer;
    }

    public String getPlayerName()
    {
        return(myName);
    }

    public String getIP()
    {
        return(myIP);
    }

    public int getPlayerType()
    {
        if(PlayerType.getSelectedItem().equals("Local Player"))
        {
            return(Player.LOCAL_PLAYER);
        }
        else if(PlayerType.getSelectedItem().equals("Remote Player"))
        {
            return(Player.REMOTE_PLAYER);
        }
        else
        {
            return(Player.AI_PLAYER);
        }
    }

    public int getPlayerNum()
    {
        return(myPlayerNum);
    }

    //*BOOLEAN METHODS*//

    public void isActive(boolean b)
    {
        isActive = b;
    }

    public boolean isReady()
    {
        return(ready == 1);
    }

    public boolean isActive()
    {
        return isActive;
    }

    //*PRE-GENERATED FIELDS*//

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField IPField;
    private javax.swing.JToggleButton PanelToggle;
    private javax.swing.JTextField PlayerNameField;
    private javax.swing.JComboBox PlayerType;
    private javax.swing.JTextField ReadyField;
    private javax.swing.JToggleButton ReadyToggle;
    // End of variables declaration//GEN-END:variables
}
